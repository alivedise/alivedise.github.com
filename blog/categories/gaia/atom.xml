<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gaia | Ascheriit]]></title>
  <link href="http://alivedise.github.com/blog/categories/gaia/atom.xml" rel="self"/>
  <link href="http://alivedise.github.com/"/>
  <updated>2013-07-23T18:10:26+02:00</updated>
  <id>http://alivedise.github.com/</id>
  <author>
    <name><![CDATA[Alive Kuo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Proposal: System Modualization Plan]]></title>
    <link href="http://alivedise.github.com/blog/2013/07/10/system-modulization-plan/"/>
    <updated>2013-07-10T18:04:00+02:00</updated>
    <id>http://alivedise.github.com/blog/2013/07/10/system-modulization-plan</id>
    <content type="html"><![CDATA[<h4>Source</h4>

<p><a href="https://github.com/mozilla-b2g/gaia/tree/master/apps/system">https://github.com/mozilla-b2g/gaia/tree/master/apps/system</a></p>

<h4>Issues with Modulization-less</h4>

<ol>
<li>Some modules directly invokes others.</li>
<li><code>'LockScreen is undefined.'</code> message appears oftenly right after device boots up.</li>
<li>Memory concern - Most of the modules are not always needed. Most of the UI view doesn't need to live in the DOM tree at first.</li>
<li>Performance concern - device bootup time is getting longer and longer.</li>
</ol>


<h4>Proposal: Core modules and side modules</h4>

<p>We could figure out what's definitely necessary in an operating system and what's not.
For example, <code>Window Management</code> relevant modules should be a core module but <code>Captive Portal</code> shouldn't be.</p>

<p>The main idea is the same as any other app performanace tuning:
Lazy load anything on demand.</p>

<p>The key to this idea would be to establish the following rules:
* Any side module would have a main event by interest.
* An event dispatcher as a core module to gather all main events of side modules and then lazy load them.
For example, lazy load the Captive Portal:</p>

<p>``` js
window.addEventListener('mozChromeEvent', function(e) {
  if (e.detail.type == 'captive-portal-login' &amp;&amp; typeof(CaptivePortal) == 'undefined') {</p>

<pre><code>lazy-load('captive-portal', function onReadyCallback() {   // lazy load captive portal and its HTML part.
  CaptivePortal.handleEvent(e);  // Pass the event
}); 
</code></pre>

<p>  }  // If we have already load the CaptivePortal, the event listener inside CP would catch the event by itself.
});
```
So another rule would be:
* expose handleEvent in any side module for Event Dispatcher to invoke when they are firt time loaded by Event Dispatcher.</p>

<p>With this, we could even lazy load lockscreen,
because if lockscreen is disabled by the user, we don't need to load it when the device boots.</p>

<p>IMO there're only few core modules now:</p>

<ul>
<li>Window Management

<ul>
<li>App Window</li>
<li>Browser Frame</li>
</ul>
</li>
<li>Utility-tray</li>
<li>Statusbar</li>
<li>Init Logo Handler (But this is useless after device boot finishes.)</li>
<li>Screen Management (Exactly, it's indeed Wake Lock Management)</li>
<li>Applications (API Wrapper for mozApp)</li>
</ul>


<p>The following are API wrappers which I believe is also important enough to be a core module.</p>

<ul>
<li>Hardware Button Management (Many other modules' execution route is started here.)</li>
<li>Battery Management (UI-less but more like an API wrapper for mozBattery so I would put this into core module.)</li>
<li>Airplane Mode (API Wrapper of mozSettings: radio.enabled)</li>
<li>Bluetooth (API Wrapper for mozBluetooth)</li>
<li>Cost Control (It already lives inside an iframe.)</li>
<li>Ftu Launcher (Necessary only for one time when device is first time booted.)</li>
<li>Keyboard Management</li>
<li>mouse2touch</li>
<li>Notifications</li>
<li>Orientation observer (API Wrapper for deviceorientation event)</li>
<li>Sound manager (There are too many events involed here.)</li>
<li>Update Management</li>
</ul>


<h5>Chanllenge</h5>

<p>If we want to "unload" the module and its view using iframe,
we need a way for modules inside iframe to communicate.
The first thing come to my mind is <code>window.parent.postMessage</code></p>

<p>Second, we need to consider dependency problems if it's too complex.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From browser to browser. (1)]]></title>
    <link href="http://alivedise.github.com/blog/2013/02/23/from-browser-to-browser/"/>
    <updated>2013-02-23T17:40:00+01:00</updated>
    <id>http://alivedise.github.com/blog/2013/02/23/from-browser-to-browser</id>
    <content type="html"><![CDATA[<h3>Firefox OS</h3>

<p><img src="http://cdn0.mos.techradar.futurecdn.net///art/mobile_phones/Mozilla/FireFoxOS/DeveloperHandsets/FirefoxOSDev-Press-01-580-75.jpg"></p>

<h3>System app</h3>

<p>Exactly, Firefox OS, also known for boot 2 gecko, is having only one app/one page.
It's the system app, which controls all web app's life cycle.
When FirefoxOS is booted, it would load the system app from <code>system/index.html</code>.
Then system app would take care of the remaing stuff.</p>

<ul>
<li>Load modules</li>
<li>Init homescreen app</li>
<li>Etc.</li>
</ul>


<h3>Window Manager</h3>

<p>Window Manager is the core of Firefox OS, the core of system app, which is in charge of creating/maintaining/killing apps.
An app, indeed, is a web page.</p>

<p>We use a magic, calling browser API, to make a web page act like an app.</p>

<h3>Browser API</h3>

<p>See https://developer.mozilla.org/en-US/docs/DOM/Using_the_Browser_API</p>

<p>A browser here means that the web page acts like it is living in a browser <code>frame</code>.
We are replacing nearly every XUL-based UI with HTML to <code>port</code> the WEB to the phone.</p>

<h3>Module Pattern</h3>

<p>Module pattern is the way Window Manager being imeplemented.
A module pattern looks like:</p>

<p>``` js
var WindowManager = (function() {
  var <em>id = 0;
  var </em>running = {};
  function createApp() {</p>

<pre><code> var app = new App();
 _running[_id] = app;
 _id++;
 return app;
</code></pre>

<p>  }</p>

<p>  function killApp(id) {</p>

<pre><code>delete _running[id];
</code></pre>

<p>  }</p>

<p>  return {</p>

<pre><code>create: createApp,
kill: killApp
</code></pre>

<p>  }
})();
```</p>

<p>Thus the Window Manager object only has 2 public attributes.
This looks fine, but it would be a nightmare if this pattern grows to over 2000 lines.
And it's having countless private functions now.</p>

<p>This module now is not unit testable nor maintainable.</p>

<h3>Break it!</h3>

<h4>From the browser to the browser</h4>

<p>Let's define a new object to contain and manage itself in its own scope.</p>

<p>It's called <code>browserFrame</code>.</p>

<h5>The responsibility of browserFrame</h5>

<p>It would create an iframe with all attributes needed for BrowserAPI.</p>

<p>``` js
'use strict';</p>

<p>/<em> Define a basic mozbrowser iframe class.
 * It creates a mozbrowser iframe,
 * and finally returns the DOM element it just created.
 </em>/</p>

<p>var BrowserFrame = (function invocation() {
  function BrowserFrame() { // This constructor function is a local variable.</p>

<pre><code>this.element = null;
this.id = nextId++;
this.callbacks = {};
createFrame.apply(this, arguments); // All arguments are values to createFrame
</code></pre>

<p>  }</p>

<p>  BrowserFrame.className = 'browser';</p>

<p>  // These are helper functions and variables used by the methods above
  // They're not part of the public API of the module, but they're hidden
  // within this function scope so we don't have to define them as a
  // property of Browser or prefix them with underscores.
  function createFrame(url, origin, name, manifestURL, oop) {</p>

<pre><code>var browser = document.createElement('iframe');
browser.setAttribute('mozallowfullscreen', 'true');

// Most apps currently need to be hosted in a special 'mozbrowser' iframe.
// They also need to be marked as 'mozapp' to be recognized as apps by the
// platform.
browser.setAttribute('mozbrowser', 'true');

if (oop)
  browser.setAttribute('remote', 'true');

if (manifestURL)
  browser.setAttribute('mozapp', manifestURL);

if (origin)
  this.origin = origin;

if (name)
  this.name = name;

browser.src = url;

browser.id = this.className + this.id;

browser.classList.add(BrowserFrame.className);

// Store the element
this.element = browser;
</code></pre>

<p>  };</p>

<p>  var nextId = 0;
  // The public API for this module is the Browser() constructor function.
  // We need to export that function from this private namespace so that
  // it can be used on the outside. In this case, we export the constructor
  // by returning it. It becomes the value of the assignment expression
  // on the first line above.
  return BrowserFrame;
}()); // Invoke the function immediately after defining it.
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[gaia] HTML5 Window Shade]]></title>
    <link href="http://alivedise.github.com/blog/2012/07/05/gaia-window-shade/"/>
    <updated>2012-07-05T13:58:00+02:00</updated>
    <id>http://alivedise.github.com/blog/2012/07/05/gaia-window-shade</id>
    <content type="html"><![CDATA[<h1>Window Shade</h1>

<p>我手上的Samsung Galaxy S3的作業系統是Android 4.0.4。</p>

<p>當我收到facebook/google+/...等程式通知的時候，最上面那條bar會出現對應的圖示。</p>

<p>這時候可以透過將bar「滑下來」的動作拉出一個UI，裡面會有</p>

<ol>
<li>快速設定</li>
<li>通知項目詳細列表</li>
</ol>


<p><img src="http://i.imgur.com/nU76i.png"></p>

<p>這個UX，Google把它稱為<b>Window shade</b></p>

<p>神奇的地方在於當你在拉下或拉上面板的同時，
快速設定與通知項目是會先「掉下來」到底端，
到了項目的頂端出現之後才會黏在頂部。
（相信我你沒有特別注意這件事情，而且用久了會覺得理所當然）</p>

<h1>GAIA也有notification panel</h1>

<p>Firefox OS的UI - <a href="http://github.com/mozilla-central/gaia">GAIA</a>裡面也有定義功能列以及通知面板這件事，
這個功能正在開發中。</p>

<p>有一天我們收到某個contributor提交的pull request：</p>

<p><a href="https://github.com/mozilla-b2g/gaia/pull/1898">Gaia pull request#1898</a>
節錄重要的修改如下：</p>

<p>``` javascript
  onTouchMove: function ut_onTouchMove(touch) {</p>

<pre><code>var screenHeight = this.overlay.getBoundingClientRect().height,
    gripBarHeight = this.gripBar.getBoundingClientRect().height,
    dy = -(this.startY - touch.pageY),
    newHeight;
if (this.shown)
  dy += screenHeight;
dy = Math.min(screenHeight, dy);

if (dy &gt; gripBarHeight) {
  var quickSettingsHeight = this.quickSettings.getBoundingClientRect().height;

  if (dy &lt; quickSettingsHeight + gripBarHeight) {
    newHeight = screenHeight - quickSettingsHeight - gripBarHeight;
  } else {
    newHeight = screenHeight - dy;
  }
  this.quickSettings.style.MozTransition = '';
  this.quickSettings.style.MozTransform = 'translateY(' + newHeight + 'px)';
}

var style = this.overlay.style;
style.MozTransition = '';
style.MozTransform = 'translateY(' + dy + 'px)';
</code></pre>

<p>  },
  //....skiped...
  show: function ut_show(dy) {</p>

<pre><code>var alreadyShown = this.shown,
    trayStyle = this.overlay.style,
    quickSettingsStyle = this.quickSettings.style;

trayStyle.MozTransition = '-moz-transform 0.2s linear';
trayStyle.MozTransform = 'translateY(100%)';

quickSettingsStyle.MozTransition = '-moz-transform 0.2s linear';
quickSettingsStyle.MozTransform = 'translateY(0px)';

this.shown = true;
this.screen.classList.add('utility-tray');

if (!alreadyShown) {
  var evt = document.createEvent('CustomEvent');
  evt.initCustomEvent('utilitytrayshow', true, true, null);
  window.dispatchEvent(evt);
}
</code></pre>

<p>  }
```</p>

<p>原作者提到他做這件事是要讓<code>quick-setting</code>更快的出現。
這段code也已經被merge了。</p>

<h1>不過就在昨天同事發現了一個關於功能列的issue</h1>

<p>於是我開始看發生了什麼事。然後上面那兩個function耗費了我一個下午....XD</p>

<p>@colinfrei其實做了一件非常有趣但是很難從code裡面看出端倪的事情。
甚至也很難用語言來描述，不過我想試著說明發生了什麼事，怎麼做到的。</p>

<p>簡單的說，他利用兩個「不同」區塊的CSS3的Transition「同步化」來實現剛剛所提的Window Shade的行為。</p>

<h2>CSS: Transition</h2>

<p><a href="https://developer.mozilla.org/en/CSS/transition">參閱MDN: transition</a></p>

<h2>CSS: Transform</h2>

<p><a href="https://developer.mozilla.org/en/CSS/transform">參閱MDN: transform</a></p>

<h1>真相其實是：</h1>

<ol>
<li><code>utility-tray</code>是一個絕對定位的<code>div</code>，平常位置定在螢幕上方<code>-moz-calc(100% - UTILITY_TRAY_HEIGHT)</code>。</li>
<li><p>當你開始Touch的時候，根據你的移動距離計算<code>translateY</code>，使它產生位移</p>

<p> 你可以把<code>-moz-transform: translateY(px)</code>當成是<code>top: px</code>在CSS3的新招。
 它提供了更快速的rendering -- 當你想利用<code>-moz-transition: -moz-transform</code>來做位移動畫的時候。
 這件事情可以另外寫一篇文章來說（挖洞的意味）。</p></li>
<li><p>當你放開拉bar的時候而且如果已經超過「要讓通知面板掉下來的合法距離」：</p>

<ul>
<li>設定一個<code>MozTransition</code>給<code>utility-tray-overlay</code></li>
<li>再設定一個<code>MozTransition</code>給<code>quick-setting</code></li>
</ul>
</li>
</ol>


<p>4.讓<code>utility-tray</code>整個以某個定速掉下來到螢幕底端 + 讓<code>quick-setting</code>以同樣的定速往上移動到<code>utility-tray</code>的開端</p>

<p>  = 於是就造成了<code>quick-setting</code>似乎黏在通知列下方不動但整個面板是往下掉的假象！</p>

<h1>the story continues</h1>

<p>不過可惜的是似乎沒有考慮到當通知面板要滑上去的時候，</p>

<p>「有物件的部份也應該留在頂端直到被拉bar撞到一起彈上去」這件事</p>

<p>於是我也仿造這個作法另外送了一個pull request</p>

<p><a href="https://github.com/mozilla-b2g/gaia/pull/2181">GAIA pull request#2181</a>
``` javascript</p>

<pre><code>  case 'transitionend':
    if (!this.shown) {
      this.screen.classList.remove('utility-tray');

      var overlayStyle = this.overlay;
      var firstShownStyle = this.firstShowStyle;
      firstShownStyle.MozTransition = '';

      if (this.phase2hide) {
        firstShownStyle.MozTransition = '-moz-transform 0.2s linear';
        firstShownStyle.MozTransform =
          'translateY(' + this.firstShownPosition + 'px)';
        overlayStyle.MozTransition = '-moz-transform 0.2s linear';
        overlayStyle.MozTransform = 'translateY(0)';

        // Check the transition event is triggered at firstShown.
        // If so, turn off the flag which represent for
        // 'The overlay has already reached the bottom of quick-setting'
        if (evt.target == this.firstShown)
          this.phase2hide = false;
      } else {
        // Reset position of this.firstShown
        this.firstShown.style.MozTransition = '';
        this.firstShown.style.MozTransform = 'translateY(0)';
      }
    }
    break;
</code></pre>

<p>```</p>

<p>利用<code>transitionend</code> event callback，透過連續兩次的<code>Transition</code>來：</p>

<ol>
<li>讓<code>utility-tray</code>先定速往上移動/讓<code>quick-setting</code>定速往下移動到底端。</li>
<li>等到<code>utility-tray</code>的transition結束時，會收到<code>transitionend</code>的事件。
 這時候再讓<code>utility-tray</code>進行第二次transition...而目的地就是螢幕頂端。
 同時<code>quick-setting</code>就不再動作了，讓它跟著<code>utility-tray</code>一起被往上卷走。</li>
</ol>


<h2>transitionend</h2>

<p><a href="https://developer.mozilla.org/zh_tw/CSS_%E8%BD%89%E5%A0%B4#.E5.81.B5.E6.B8.AC_transition_.E7.9A.84.E5.AE.8C.E6.88.90">參閱MDN: transitionend</a></p>

<h1>the end?</h1>

<p>其實UX還沒有定義這個行為，所以pull request本身沒有被接受。
不過...I did learn something from these codes:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Gaia on Mac with Firefox Nightly build]]></title>
    <link href="http://alivedise.github.com/blog/2012/05/05/gaia/"/>
    <updated>2012-05-05T10:40:00+02:00</updated>
    <id>http://alivedise.github.com/blog/2012/05/05/gaia</id>
    <content type="html"><![CDATA[<ul>
<li><p>本文來自<a href="https://github.com/jrburke/gaia-devserver">https://github.com/jrburke/gaia-devserver</a></p></li>
<li><p>安裝Node
 PKG: <a href="https://sites.google.com/site/nodejsmacosx/">https://sites.google.com/site/nodejsmacosx/</a></p></li>
<li>安裝<a href="http://nightly.mozilla.org/">Firefox Nightly Build</a></li>
<li><p>修改<code>/etc/hosts</code>加入</p>

<p> 127.0.0.1     gaiamobile.org</p></li>
<li><p>安裝gaia</p>

<p> mkdir b2g
 cd b2g
 git clone git://github.com/andreasgal/gaia.git
 git clone git://github.com/jrburke/gaia-devserver.git
 cd gaia
 GAIA_DOMAIN=gaiamobile.org:8424 make
 cd ..
 node gaia-devserver/devserver.js docRoot=gaia/apps</p></li>
<li><p>啟動Firefox Nightly</p>

<p> /Applications/FirefoxNightly.app/Contents/MacOS/firefox -profile /Users/alive/b2g/gaia/profile --no-remote http://homescreen.gaiamobile.org:8424</p></li>
<li><p>開新分頁<code>about:config</code>，把<code>browser.offline-apps.notify</code>設成false</p></li>
<li>加入一個新的Boolean設定值名為<code>dom.w3c_touch_events.enabled</code>設成true</li>
<li>完成了！
<img src="https://lh6.googleusercontent.com/-an0dqr9lhAM/T6Qjwhk5emI/AAAAAAAAC5k/6-4SRu5Wv7Q/s1162/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-05-05+%E4%B8%8A%E5%8D%882.44.59.png"></li>
</ul>

]]></content>
  </entry>
  
</feed>
